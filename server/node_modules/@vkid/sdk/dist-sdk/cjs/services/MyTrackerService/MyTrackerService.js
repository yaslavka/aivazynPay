'use strict';

var request = require('../../utils/request.js');
var types = require('./types.js');

function _class_call_check(instance, Constructor) {
    if (!(instance instanceof Constructor)) {
        throw new TypeError("Cannot call a class as a function");
    }
}
function _defineProperties(target, props) {
    for(var i = 0; i < props.length; i++){
        var descriptor = props[i];
        descriptor.enumerable = descriptor.enumerable || false;
        descriptor.configurable = true;
        if ("value" in descriptor) descriptor.writable = true;
        Object.defineProperty(target, descriptor.key, descriptor);
    }
}
function _create_class(Constructor, protoProps, staticProps) {
    if (protoProps) _defineProperties(Constructor.prototype, protoProps);
    if (staticProps) _defineProperties(Constructor, staticProps);
    return Constructor;
}
function _define_property(obj, key, value) {
    if (key in obj) {
        Object.defineProperty(obj, key, {
            value: value,
            enumerable: true,
            configurable: true,
            writable: true
        });
    } else {
        obj[key] = value;
    }
    return obj;
}
var MyTrackerService = /*#__PURE__*/ function() {
    function MyTrackerService(config) {
        _class_call_check(this, MyTrackerService);
        _define_property(this, "config", void 0);
        this.config = config;
    }
    _create_class(MyTrackerService, [
        {
            key: "init",
            value: function init() {
                var _this = this;
                this.getTrackerId().then(function(response) {
                    var _response_response, _response;
                    if (((_response = response) === null || _response === void 0 ? void 0 : (_response_response = _response.response) === null || _response_response === void 0 ? void 0 : _response_response.active) === types.MyTrackerStatus.ON) {
                        _this.includeOnPage(response.response.tracker_id);
                    }
                }).catch(console.error);
            }
        },
        {
            key: "getTrackerId",
            value: function getTrackerId() {
                var url = request.getStatsUrl("vkid_sdk_get_config", this.config);
                return request.request(url, {});
            }
        },
        {
            key: "includeOnPage",
            value: function includeOnPage(trackerId) {
                // @ts-expect-error
                var _tmr = window._tmr || (window._tmr = []);
                _tmr.push({
                    id: trackerId,
                    type: "pageView",
                    start: new Date().getTime()
                });
                if (document.getElementById("tmr-code")) {
                    return;
                }
                var ts = document.createElement("script");
                ts.type = "text/javascript";
                ts.async = true;
                ts.id = "tmr-code";
                ts.src = "https://mytopf.com/js/code.js";
                var s = document.getElementsByTagName("script")[0];
                // @ts-expect-error
                s.parentNode.insertBefore(ts, s);
            }
        }
    ]);
    return MyTrackerService;
}();

exports.MyTrackerService = MyTrackerService;
